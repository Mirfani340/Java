 Buatlah implementasi Queue menggunakan circular array untuk memasukkan data
NIM, Nama, dan Alamat mahasiswa


System.out.print("How many data ? :");
                    int usrInput = scan.nextInt();
                    for (int i = 0; i < usrInput; i++) {
                        System.out.print("Inputkan data : ");
                        int input = scan.nextInt();
                        Node data = new Node(input);
                        Queue.enqueue(data);
                    }

                    import java.util.ArrayList;
                    import java.util.Scanner;

                    public class CircularQueue {

                        // Declaring the class variables.
                        private int size, front, rear;

                        // Declaring array list.
                        private ArrayList<String> nim = new ArrayList<String>();
                        private ArrayList<String> nama = new ArrayList<String>();
                        private ArrayList<String> alamat = new ArrayList<String>();

                        // Constructor
                        CircularQueue(int size) {
                            this.size = size;
                            this.front = this.rear = -1;
                        }

                        // Method to insert a new element in the queue.
                        public void enQueue(String nim, String nama, String alamat) {

                            // Condition if queue is full.
                            if((front == 0 && rear == size - 1) || (rear == (front - 1) % (size - 1))) {
                                System.out.print("Queue is Full");
                            }

                            // condition for empty queue.
                            else if(front == -1) {
                                front = 0;
                                rear = 0;
                                this.nim.add(rear, nim);
                                this.nama.add(rear, nama);
                                this.alamat.add(rear, alamat);
                            }

                            else if(rear == size - 1 && front != 0) {
                                rear = 0;
                                this.nim.set(rear, nim);
                                this.nama.set(rear, nama);
                                this.alamat.set(rear, alamat);
                            }

                            else {
                                rear = (rear + 1);

                                // Adding a new element if
                                if(front <= rear) {
                                    this.nim.add(rear, nim);
                                    this.nama.add(rear, nama);
                                    this.alamat.add(rear, alamat);
                                }

                                // Else updating old value
                                else {
                                    this.nim.set(rear, nim);
                                    this.nama.set(rear, nama);
                                    this.alamat.set(rear, alamat);
                                }
                            }
                        }

                        // Function to dequeue an element form th queue.
                        public String deQueue() {
                            String temp;

                            // Condition for empty queue.
                            if(front == -1)
                            {
                                System.out.println("Queue kosong!");

                                // Return -1 in case of empty queue
                                return "-1";
                            }

                            temp = nim.get(front);

                            // Condition for only one element
                            if(front == rear) {
                                front = -1;
                                rear = -1;
                            }

                            else if(front == size - 1) {
                                front = 0;
                            }

                            else {
                                front = front + 1;
                            }

                            // Returns the dequeued element
                            return temp;
                        }

                        // Method to display the elements of queue
                        public void displayQueue()
                        {

                            // Condition for empty queue.
                            if(front == -1)
                            {
                                System.out.println("Queue kosong!");
                                return;
                            }

                            // If rear has not crossed the max size
                            // or queue rear is still greater then
                            // front.
                            System.out.println("Data yang terdaftar di queue: ");

                            if(rear >= front) {

                                // Loop to print elements from front to rear.
                                for(int i = front; i <= rear; i++) {
                                    System.out.println("NIM: " + nim.get(i));
                                    System.out.println("Nama: " + nama.get(i));
                                    System.out.println("Alamat: " + alamat.get(i));
                                    System.out.println();
                                }
                            }

                            // If rear crossed the max index and
                            // indexing has started in loop
                            else {

                                // Loop for printing elements from
                                // front to max size or last index
                                for(int i = front; i < size; i++) {
                                    System.out.println("NIM: " + nim.get(i));
                                    System.out.println("Nama: " + nama.get(i));
                                    System.out.println("Alamat: " + alamat.get(i));
                                    System.out.println();
                                }

                                // Loop for printing elements from
                                // 0th index till rear position
                                for(int i = 0; i <= rear; i++) {
                                    System.out.println("NIM: " + nim.get(i));
                                    System.out.println("Nama: " + nama.get(i));
                                    System.out.println("Alamat: " + alamat.get(i));
                                    System.out.println();
                                }
                            }
                        }

                        public static void main(String[] args) {

                            // Deklarasi Circular QUeue
                            CircularQueue circularQueue = new CircularQueue(10);

                            // Scanner
                            Scanner input = new Scanner(System.in);

                            // Loop
                            boolean exit = false;

                            do {
                                System.out.println("Menu Utama");
                                System.out.println("1. Masukan data");
                                System.out.println("2. DeQueue data");
                                System.out.println("3. Lihat data");
                                System.out.println("4. Keluar");
                                System.out.print("\n> ");

                                int nav = input.nextInt();
                                input.nextLine();

                                switch(nav) {
                                    case 1:
                                        System.out.print("Masukan NIM: ");
                                        String nim = input.nextLine();

                                        System.out.print("Masukan Nama: ");
                                        String nama = input.nextLine();

                                        System.out.print("Masukan Alamat: ");
                                        String alamat = input.nextLine();

                                        circularQueue.enQueue(nim, nama, alamat);

                                        break;

                                    case 2:
                                        String deQueuedNIM = circularQueue.deQueue();
                                        if(!deQueuedNIM.equals("-1"))
                                            System.out.print("Berhasil melakukan DeQueue data milik mahasiswa ber-NIM " + deQueuedNIM);
                                        System.out.println();
                                        break;

                                    case 3:
                                        circularQueue.displayQueue();
                                        break;

                                    case 4:
                                        System.out.println("Exiting...");
                                        exit = true;
                                        break;

                                    default:
                                        System.out.println("Error: Input invalid!");
                                        break;
                                }
                                System.out.println();
                            } while(!exit);
                        }
                    }